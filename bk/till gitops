pipeline {
    agent any

    environment {
        GIT_REPO       = 'git@github.com:Ajayab05/rento-update.git'
        IMAGE_NAME     = 'ajayab05/rento-app'
        TAG            = "build-${BUILD_NUMBER}"
        K8S_NAMESPACE  = 'rento'
        CONFIGMAP_NAME = 'rento-config'
        SECRET_NAME    = 'rento-secret'
        SERVICE_TYPE   = 'LoadBalancer'
        SERVICE_PORT   = 80
        TARGET_PORT    = 3000
        PATH           = "/usr/local/bin:${env.PATH}" // include ArgoCD CLI
    }

    stages {

        stage('Checkout Repository') {
            steps {
                sshagent(['github-ssh-key']) {
                    sh '''
                        mkdir -p ~/.ssh
                        ssh-keyscan github.com >> ~/.ssh/known_hosts
                        git checkout main || git checkout -b main
                        git pull origin main || echo "No remote changes"
                    '''
                }
            }
        }

        stage('Lint, TypeScript & Audit') {
            parallel {
                stage('ESLint') {
                    steps { sh 'npx eslint . --ext .js,.jsx,.ts,.tsx || true' }
                }
                stage('TypeScript') {
                    when { expression { fileExists('tsconfig.json') } }
                    steps { sh 'npx tsc --noEmit || true' }
                }
                stage('NPM Audit') {
                    steps { sh 'npm audit --audit-level=high || true' }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh '''
                        docker run --rm \
                            -v "$PWD":/usr/src \
                            -w /usr/src \
                            sonarsource/sonar-scanner-cli:latest \
                            sonar-scanner \
                                -Dsonar.projectKey=RentoApp \
                                -Dsonar.sources=. \
                                -Dsonar.host.url="$SONAR_HOST_URL" \
                                -Dsonar.login="$SONAR_AUTH_TOKEN"
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t "$IMAGE_NAME:$TAG" .'
            }
        }

        stage('Image Security Scan (Trivy)') {
            steps {
                sh '''
                    docker run --rm \
                        -v /var/run/docker.sock:/var/run/docker.sock \
                        -v $PWD:/workspace \
                        aquasec/trivy:latest image \
                        --format json \
                        --output /workspace/trivy-report.json \
                        --severity HIGH,CRITICAL \
                        "$IMAGE_NAME:$TAG"
                    echo "Trivy report generated at trivy-report.json"
                '''
                archiveArtifacts artifacts: 'trivy-report.json', fingerprint: true
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', 
                                                 usernameVariable: 'DOCKER_USER', 
                                                 passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker push "$IMAGE_NAME:$TAG"
                        docker logout
                    '''
                }
            }
        }

        stage('Update Git Tag') {
            steps {
                sshagent(['github-ssh-key']) {
                    sh '''
                        git config --global user.email "ajayab05@gmail.com"
                        git config --global user.name "Ajayab05"

                        git add .
                        git commit -m "Update Docker image tag to $TAG" || echo "No changes"
                        git pull --rebase git@github.com:Ajayab05/rento-update.git main || echo "No remote changes"
                        git push git@github.com:Ajayab05/rento-update.git main
                    '''
                }
            }
        }

        stage('Kubernetes Deployment') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig-file', variable: 'KUBECONFIG')]) {
                    withCredentials([
                        string(credentialsId: 'db-url', variable: 'DB_URL'),
                        string(credentialsId: 'db-username', variable: 'DB_USER'),
                        string(credentialsId: 'db-password', variable: 'DB_PASS')
                    ]) {
                        sh """
                            set -eu

                            # Replace image tag in deployment manifest
                            sed -i "s/PLACEHOLDER_TAG/$TAG/g" k8s/deployment.yml

                            # Create namespace if missing
                            if ! kubectl get namespace "$K8S_NAMESPACE" >/dev/null 2>&1; then
                                kubectl create namespace "$K8S_NAMESPACE"
                            fi

                            # Apply ConfigMap
                            cat <<EOF | kubectl apply -n "$K8S_NAMESPACE" -f -
apiVersion: v1
kind: ConfigMap
metadata:
  name: $CONFIGMAP_NAME
data:
  DATABASE_LOGGING: "true"
  DATABASE_SYNCHRONIZE: "false"
  DATABASE_MAX_CONNECTIONS: "100"
  DATABASE_SSL_ENABLED: "false"
  DATABASE_REJECT_UNAUTHORIZED: "false"
  NODE_ENV: "production"
EOF

                            # Apply Secret
                            cat <<EOF | kubectl apply -n "$K8S_NAMESPACE" -f -
apiVersion: v1
kind: Secret
metadata:
  name: $SECRET_NAME
type: Opaque
stringData:
  DATABASE_URL: "$DB_URL"
  DATABASE_USERNAME: "$DB_USER"
  DATABASE_PASSWORD: "$DB_PASS"
EOF

                            # Apply Deployment and Service
                            kubectl apply -f k8s/deployment.yml -n "$K8S_NAMESPACE"
                            kubectl apply -f k8s/service.yml -n "$K8S_NAMESPACE"

                            # Wait for rollout
                            kubectl rollout status deployment/rento-app -n "$K8S_NAMESPACE" --timeout=180s

                            # Check status
                            kubectl get pods -n "$K8S_NAMESPACE"
                            kubectl get svc -n "$K8S_NAMESPACE"
                        """
                    }
                }
            }
        }

        stage('ArgoCD Sync') {
            steps {
                withCredentials([
    string(credentialsId: 'ARGO_PASS', variable: 'ARGOPASS')
]) {
    sh '''
        /usr/local/bin/argocd login 3.111.144.250:32667 \
            --username admin \
            --password "$ARGOPASS" \
            --insecure

        /usr/local/bin/argocd app sync rento-app
        /usr/local/bin/argocd app wait rento-app --timeout 300
    '''
                }
            }
        }

    } // end of stages

    post {
        always {
            echo "âœ… Pipeline finished!"
        }
    }
}
